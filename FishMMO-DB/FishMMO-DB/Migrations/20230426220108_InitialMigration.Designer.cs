// <auto-generated />
using System;
using FishMMO_DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FishMMO_DB.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    [Migration("20230426220108_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("FishMMO_DB.Entities.AccountEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("Banned")
                        .HasColumnType("boolean")
                        .HasColumnName("banned");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("Lastlogin")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lastlogin");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Name")
                        .HasName("pk_accounts");

                    b.ToTable("accounts", "fishMMO");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.CharacterBuffEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("BuffTimeEnd")
                        .HasColumnType("real")
                        .HasColumnName("buff_time_end");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasColumnName("character_id");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_character_buffs");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_character_buffs_character_id");

                    b.HasIndex("CharacterId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_character_buffs_character_id_name");

                    b.ToTable("character_buffs", "fishMMO");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.CharacterEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<bool>("IsGameMaster")
                        .HasColumnType("boolean")
                        .HasColumnName("is_game_master");

                    b.Property<DateTime>("LastSaved")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_saved");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameLowercase")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("name_lowercase")
                        .HasComputedColumnSql("LOWER(\"name\")", true);

                    b.Property<bool>("Online")
                        .HasColumnType("boolean")
                        .HasColumnName("online");

                    b.Property<int>("RaceID")
                        .HasColumnType("integer")
                        .HasColumnName("race_id");

                    b.Property<float>("RotW")
                        .HasColumnType("real")
                        .HasColumnName("rot_w");

                    b.Property<float>("RotX")
                        .HasColumnType("real")
                        .HasColumnName("rot_x");

                    b.Property<float>("RotY")
                        .HasColumnType("real")
                        .HasColumnName("rot_y");

                    b.Property<float>("RotZ")
                        .HasColumnType("real")
                        .HasColumnName("rot_z");

                    b.Property<string>("SceneName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scene_name");

                    b.Property<bool>("Selected")
                        .HasColumnType("boolean")
                        .HasColumnName("selected");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_created");

                    b.Property<DateTime>("TimeDeleted")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_deleted");

                    b.Property<float>("X")
                        .HasColumnType("real")
                        .HasColumnName("x");

                    b.Property<float>("Y")
                        .HasColumnType("real")
                        .HasColumnName("y");

                    b.Property<float>("Z")
                        .HasColumnType("real")
                        .HasColumnName("z");

                    b.HasKey("Id")
                        .HasName("pk_characters");

                    b.HasIndex("Account")
                        .HasDatabaseName("ix_characters_account");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_characters_name");

                    b.HasIndex("NameLowercase")
                        .IsUnique()
                        .HasDatabaseName("IX_CharacterEntity_NameLowercase");

                    b.ToTable("characters", "fishMMO");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.CharacterEquipmentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasColumnName("character_id");

                    b.Property<long>("InstanceID")
                        .HasColumnType("bigint")
                        .HasColumnName("instance_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Seed")
                        .HasColumnType("integer")
                        .HasColumnName("seed");

                    b.Property<int>("Slot")
                        .HasColumnType("integer")
                        .HasColumnName("slot");

                    b.Property<int>("TemplateID")
                        .HasColumnType("integer")
                        .HasColumnName("template_id");

                    b.HasKey("Id")
                        .HasName("pk_character_equipment");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_character_equipment_character_id");

                    b.HasIndex("CharacterId", "Slot")
                        .IsUnique()
                        .HasDatabaseName("ix_character_equipment_character_id_slot");

                    b.ToTable("character_equipment", "fishMMO");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.CharacterGuildEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasColumnName("character_id");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.HasKey("Id")
                        .HasName("pk_character_guild");

                    b.HasIndex("CharacterId")
                        .IsUnique()
                        .HasDatabaseName("ix_character_guild_character_id");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_character_guild_guild_id");

                    b.HasIndex("CharacterId", "GuildId")
                        .IsUnique()
                        .HasDatabaseName("ix_character_guild_character_id_guild_id");

                    b.ToTable("character_guild", "fishMMO");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.CharacterInventoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasColumnName("character_id");

                    b.Property<long>("InstanceID")
                        .HasColumnType("bigint")
                        .HasColumnName("instance_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Seed")
                        .HasColumnType("integer")
                        .HasColumnName("seed");

                    b.Property<int>("Slot")
                        .HasColumnType("integer")
                        .HasColumnName("slot");

                    b.Property<int>("TemplateID")
                        .HasColumnType("integer")
                        .HasColumnName("template_id");

                    b.HasKey("Id")
                        .HasName("pk_character_inventory");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_character_inventory_character_id");

                    b.HasIndex("CharacterId", "Slot")
                        .IsUnique()
                        .HasDatabaseName("ix_character_inventory_character_id_slot");

                    b.ToTable("character_inventory", "fishMMO");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.CharacterItemCooldownEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasColumnName("character_id");

                    b.Property<float>("CooldownEnd")
                        .HasColumnType("real")
                        .HasColumnName("cooldown_end");

                    b.HasKey("Id")
                        .HasName("pk_character_itemcooldowns");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_character_itemcooldowns_character_id");

                    b.HasIndex("CharacterId", "Category")
                        .IsUnique()
                        .HasDatabaseName("ix_character_itemcooldowns_character_id_category");

                    b.ToTable("character_itemcooldowns", "fishMMO");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.CharacterQuestEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasColumnName("character_id");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean")
                        .HasColumnName("completed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Progress")
                        .HasColumnType("integer")
                        .HasColumnName("progress");

                    b.HasKey("Id")
                        .HasName("pk_character_quests");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_character_quests_character_id");

                    b.HasIndex("CharacterId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_character_quests_character_id_name");

                    b.ToTable("character_quests", "fishMMO");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.CharacterSkillEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("CastTimeEnd")
                        .HasColumnType("real")
                        .HasColumnName("cast_time_end");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasColumnName("character_id");

                    b.Property<float>("CooldownEnd")
                        .HasColumnType("real")
                        .HasColumnName("cooldown_end");

                    b.Property<int>("Hash")
                        .HasColumnType("integer")
                        .HasColumnName("hash");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.HasKey("Id")
                        .HasName("pk_character_skills");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_character_skills_character_id");

                    b.HasIndex("CharacterId", "Hash")
                        .IsUnique()
                        .HasDatabaseName("ix_character_skills_character_id_hash");

                    b.ToTable("character_skills", "fishMMO");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.GuildInfoEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notice")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notice");

                    b.HasKey("Id")
                        .HasName("pk_guild_info");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_guild_info_name");

                    b.ToTable("guild_info", "fishMMO");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.WorldServerEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int>("CharacterCount")
                        .HasColumnType("integer")
                        .HasColumnName("character_count");

                    b.Property<DateTime>("LastPulse")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_pulse");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean")
                        .HasColumnName("locked");

                    b.Property<int>("Port")
                        .HasColumnType("integer")
                        .HasColumnName("port");

                    b.HasKey("Name")
                        .HasName("pk_world_servers");

                    b.ToTable("world_servers", "fishMMO");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.CharacterBuffEntity", b =>
                {
                    b.HasOne("FishMMO_DB.Entities.CharacterEntity", "Character")
                        .WithMany("Buffs")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("fk_character_buffs_characters_character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.CharacterEquipmentEntity", b =>
                {
                    b.HasOne("FishMMO_DB.Entities.CharacterEntity", "Character")
                        .WithMany("Equipment")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("fk_character_equipment_characters_character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.CharacterGuildEntity", b =>
                {
                    b.HasOne("FishMMO_DB.Entities.CharacterEntity", "Character")
                        .WithOne("Guild")
                        .HasForeignKey("FishMMO_DB.Entities.CharacterGuildEntity", "CharacterId")
                        .HasConstraintName("fk_character_guild_characters_character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishMMO_DB.Entities.GuildInfoEntity", "Guild")
                        .WithMany("Characters")
                        .HasForeignKey("GuildId")
                        .HasConstraintName("fk_character_guild_guild_info_guild_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.CharacterInventoryEntity", b =>
                {
                    b.HasOne("FishMMO_DB.Entities.CharacterEntity", "Character")
                        .WithMany("Inventory")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("fk_character_inventory_characters_character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.CharacterItemCooldownEntity", b =>
                {
                    b.HasOne("FishMMO_DB.Entities.CharacterEntity", "Character")
                        .WithMany("ItemCooldowns")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("fk_character_itemcooldowns_characters_character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.CharacterQuestEntity", b =>
                {
                    b.HasOne("FishMMO_DB.Entities.CharacterEntity", "Character")
                        .WithMany("Quests")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("fk_character_quests_characters_character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.CharacterSkillEntity", b =>
                {
                    b.HasOne("FishMMO_DB.Entities.CharacterEntity", "Character")
                        .WithMany("Skills")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("fk_character_skills_characters_character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.CharacterEntity", b =>
                {
                    b.Navigation("Buffs");

                    b.Navigation("Equipment");

                    b.Navigation("Guild")
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("ItemCooldowns");

                    b.Navigation("Quests");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("FishMMO_DB.Entities.GuildInfoEntity", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
